"VertexLitGeneric"
{
	"$basetexture" "models\bloo_ltcom_zel\citizens\female\citizen_sheet2"
	"$bumpmap" "models\bloo_ltcom_zel\citizens\female\citizen_sheet2_n"
	"$halflambert" "1"

	"$color2" "{59 89 104}" // Nice civies blue.
	
	"$phong" "1"
	"$phongexponent" "4"
	"$phongboost" "0.3"
	"$phongfresnelranges" "[0.1 0.2 0.5]"
	
	"$phongexponenttexture" "models\bloo_ltcom_zel\citizens\female\citizen_sheet2_p"
	
	"$rimlight" "1"
	"$rimlightexponent" "8"
	"$rimlightboost" "2"
	"$rimmask" "1"
	
	"$blendtintbybasealpha" "1" // alpha channel of $basetexture: color mask.
 	"$blendtintcoloroverbase" "0" // blend mode. anything =/= 0 is ugly!
	
	"$PhongBrightnessScalar" "0.5" // see below. "0.5" will get overwritten.
	
	Proxies
	{
		// If you're basing your playermodels off of these, you may want to enable PlayerColor.
		// Just this part below, and comment out the $color2 near the top of the qc.

		//PlayerColor
		//{
		//	resultVar	$color2 // pass the player color value to Gmod
		//	default		0.23 0.35 0.41 // unused for now.
		//}
		Clamp // clamp the chosen color between 1% and 125% (usually)
		{
			min 0.01
			max 1.25
			srcVar1 "$color2"
			resultVar "$color2"
		}
		Clamp // copy this value to phong tint, clamp it to 50% min.
		{
			min 0.5
			max 1.0
			srcVar1 "$color2"
			resultVar "$phongtint"
		}
		Equals // copy $color2 value to exterior variable. this makes it
		{      // no longer a RGB array but a single float instead (!??)
			srcVar1 "$color2"
			resultVar "$PhongBrightnessScalar"
		}
		Multiply // multiply $phongtint by this new float value.
		{
			srcVar1 "$phongtint"
			srcVar2 "$phongBrightnessScalar"
			resultVar "$phongtint"
		}
		Clamp // the result of this multiply doesn't go any lower than 20%
		{
			min 0.25
			max 1.00
			srcVar1 "$phongtint"
			resultVar "$phongtint"
		}
	}
}